name: Test Action

on:
  push:
    branches:
      - feature/*
      - release/*
  pull_request:

permissions:
  contents: write # Grant permission to write to the repository

jobs:
  tag-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Git
        shell: bash
        run: |
          git config user.name "gh-actions-releaser"
          git config user.email "ghactionsreleaser@gmail.com"

      - name: Get tag
        shell: bash
        id: get_tag
        run: |
          git fetch --all

          if [ -z "${{ github.event.pull_request.head.ref }}" ]; then
            echo "branch=${{ github.ref }}" >> $GITHUB_OUTPUT 
          else
            git checkout ${{ github.event.pull_request.head.ref }}
          echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT 
          fi

      - name: Mask secrets
        id: mask_secrets
        uses: actions/github-script@v7
        with:
          script: |
            const jira_data = `${{ secrets.JIRA_DATA }}` || '{}';
              
            const data = JSON.parse(jira_data);

            try {
              core.setSecret(data.api_token);
              core.setSecret(data.email);
              core.setSecret(data.domain);
              core.setSecret(data.project_key);
            } catch (error) {
              core.setFailed(`'jira_data' should be a valid JSON`)
            }

      - name: Launch Jira Tasks
        id: jira_tasks
        uses: iamigui/jira-issue-to-markdown@main
        env:
          BRANCH_NAME: ${{ steps.get_tag.outputs.branch }}
          JIRA_API_TOKEN: ${{ fromJSON(secrets.JIRA_DATA).api_token }}
          JIRA_EMAIL: ${{ fromJSON(secrets.JIRA_DATA).email }}
          JIRA_DOMAIN: ${{ fromJSON(secrets.JIRA_DATA).domain }}
          JIRA_PROJECT_KEY: ${{ fromJSON(secrets.JIRA_DATA).project_key }}

      - name: Set Outputs
        id: set_outputs
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseFileContent = fs.readFileSync('RELEASE_NOTES.md', 'utf-8')

            core.setOutput('release_content', releaseFileContent)
